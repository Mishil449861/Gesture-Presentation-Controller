import cv2
import mediapipe as mp
import time
import math
from pynput.keyboard import Key, Controller

keyboard = Controller()
last_action = "None"
last_action_time = 0
ACTION_COOLDOWN = 1.2  # Cooldown in seconds

def get_gesture(hand_landmarks):
    """Analyzes finger and thumb positions to determine the current gesture."""
    thumb_tip, index_tip, middle_tip, ring_tip, pinky_tip = 4, 8, 12, 16, 20
    thumb_mcp, index_mcp, middle_mcp, ring_mcp, pinky_mcp = 2, 5, 9, 13, 17
    
    def is_finger_up(tip_index, mcp_index):
        return hand_landmarks.landmark[tip_index].y < hand_landmarks.landmark[mcp_index].y

    def is_finger_down(tip_index, mcp_index):
        return hand_landmarks.landmark[tip_index].y > hand_landmarks.landmark[mcp_index].y

    index_up = is_finger_up(index_tip, index_mcp)
    middle_up = is_finger_up(middle_tip, middle_mcp)
    ring_up = is_finger_up(ring_tip, ring_mcp)
    pinky_up = is_finger_up(pinky_tip, pinky_mcp)

    index_down = is_finger_down(index_tip, index_mcp)
    middle_down = is_finger_down(middle_tip, middle_mcp)
    ring_down = is_finger_down(ring_tip, ring_mcp)
    pinky_down = is_finger_down(pinky_tip, pinky_mcp)
    
    thumb_up = is_finger_up(thumb_tip, thumb_mcp)
    
    # --- Gesture Definitions ---
    if index_up and middle_down and ring_down and pinky_down:
        return "Pointing_Up" # New definition for Next Slide
        
    if index_down and middle_down and ring_down and pinky_down:
        return "Closed_Fist"
        
    if index_up and middle_up and ring_up and pinky_up:
        return "Open_Palm"
        
    if index_up and middle_up and ring_down and pinky_down:
        return "Victory"
        
    return "None"

# Main Application
def main():
    global last_action, last_action_time

    cap = cv2.VideoCapture(0)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

    mp_hands = mp.solutions.hands
    hands = mp_hands.Hands(min_detection_confidence=0.7, min_tracking_confidence=0.7, max_num_hands=2)
    mp_drawing = mp.solutions.drawing_utils

    print("Presentation Controller Started...")

    while cap.isOpened():
        success, frame = cap.read()
        if not success: continue
        frame = cv2.flip(frame, 1)
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        
        results = hands.process(frame_rgb)
        
        action_this_frame = "None"

        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
            
            if len(results.multi_hand_landmarks) == 2:
                gesture1 = get_gesture(results.multi_hand_landmarks[0])
                gesture2 = get_gesture(results.multi_hand_landmarks[1])
                if gesture1 == "Open_Palm" and gesture2 == "Open_Palm":
                    action_this_frame = "Two_Open_Palms_Exit"
            
            if action_this_frame == "None":
                hand_landmarks = results.multi_hand_landmarks[0]
                action_this_frame = get_gesture(hand_landmarks)

        current_time = time.time()
        if action_this_frame != "None" and action_this_frame != last_action:
            if current_time - last_action_time > ACTION_COOLDOWN:
                # --- MODIFIED: Updated action mapping ---
                if action_this_frame == "Pointing_Up":
                    print("Action: Pointing Up -> Next Slide")
                    keyboard.press(Key.right); keyboard.release(Key.right)
                elif action_this_frame == "Closed_Fist":
                    print("Action: Fist -> Previous Slide")
                    keyboard.press(Key.left); keyboard.release(Key.left)
                elif action_this_frame == "Victory":
                    print("Action: Victory -> Start PowerPoint")
                    keyboard.press(Key.f5); keyboard.release(Key.f5)
                elif action_this_frame == "Open_Palm":
                    print("Action: Open Palm -> Start Google Slides")
                    with keyboard.pressed(Key.ctrl):
                        keyboard.press(Key.f5); keyboard.release(Key.f5)
                elif action_this_frame == "Two_Open_Palms_Exit":
                    print("Action: Two Open Palms -> Exit Presentation")
                    keyboard.press(Key.esc); keyboard.release(Key.esc)

                last_action_time = current_time
                
        if action_this_frame == "None":
            last_action = "None"
        else:
            last_action = action_this_frame

        cv2.putText(frame, f"Action: {action_this_frame}", (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 0, 255), 3)
        cv2.imshow('Gesture Controller', frame)

        if cv2.waitKey(5) & 0xFF == 27:
            break

    cap.release()
    cv2.destroyAllWindows()
    hands.close()

if __name__ == '__main__':
    main()
